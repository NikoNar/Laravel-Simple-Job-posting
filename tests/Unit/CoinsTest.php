<?php

namespace Tests\Unit;

use App\Models\User;
use App\Services\TransactionService;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseMigrations;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
//use PHPUnit\Framework\TestCase;

class CoinsTest extends TestCase
{
    use RefreshDatabase,DatabaseMigrations;

//    public function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    protected $connectionsToTransact = ['testing'];

    public function test_not_enough_coins_for_creation_job_vacancy()
    {
        $user = User::factory()->make();
        $service = new TransactionService();
        $service->set_coins_amount($user,3);
        $this->assertEquals(3,$service->get_coins($user));
    }

    public function test_does_get_amount_is_correct()
    {
        $user = User::factory()->make();
        $service = new TransactionService();
        $service->set_coins_amount($user,3);
        $service->create_job_post($user);
        $this->assertEquals(1,$service->get_coins($user));
    }

    //max 5
    public function test_limitation_for_coins()
    {
        $user = User::factory()->make();
        $service = new TransactionService();
        $service->set_coins_amount($user,10);

        $this->assertEquals(5,$service->get_coins($user));
    }

    public function test_does_amount_will_not_hit_the_max()
    {
        $user = User::factory()->make();
        $service = new TransactionService();
        $service->get_daily_coins($user);

        $this->assertEquals(5,$service->get_coins($user));
    }

    public function test_does_amount_will_not_hit_the_max2()
    {
        $user = User::factory()->make();

        $service = new TransactionService();
        $service->set_coins_amount($user,1);
        $service->get_daily_coins($user);

        $this->assertEquals(3,$service->get_coins($user));
    }

}
